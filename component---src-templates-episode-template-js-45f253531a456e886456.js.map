{"version":3,"sources":["webpack:///./src/components/Participant.js","webpack:///./src/components/Disqus.js","webpack:///./src/templates/EpisodeTemplate.js","webpack:///./src/components/EpisodeListItem.js"],"names":["Guest","render","this","props","displayName","socialNetwork","avatarUrl","avatarAndName","alt","src","css","href","target","rel","Component","hasLoaded","Disqus","componentDidMount","window","document","shortname","urlDomain","url","identifier","title","onLoad","disqus_config","script","createElement","async","onload","body","appendChild","maybeLoadDisqusScript","DISQUS","reset","reload","config","location","page","protocol","id","defaultProps","Links","content","map","name","links","key","link","EpisodeTemplate","data","episodesJson","allParticipantsJson","file","allFile","description","embedded","fields","episodeNumber","slug","hosts","guests","participants","edges","forEach","node","participantId","edge","find","publicURL","image","Layout","Helmet","SEO","postSlug","isBlogPost","EpisodeListItem","linked","frameBorder","scrolling","host","participant","guest","length","date","Container","Dates","DateTime","fromISO","setLocale","toLocaleString","DATE_FULL","formatDate","start","titleCss","to","Subtitle"],"mappings":"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","file":"component---src-templates-episode-template-js-45f253531a456e886456.js","sourcesContent":["import React, { Component } from 'react';\n\nimport css from '@emotion/css';\n\nexport default class Guest extends Component {\n  render() {\n    const { displayName, socialNetwork, avatarUrl } = this.props;\n\n    const avatarAndName = (\n      <>\n        <img\n          alt={displayName}\n          src={avatarUrl}\n          css={css`\n            border-radius: 50%;\n            width: 100px;\n            margin: 0 0 10px;\n          `}\n        />\n        <p css={css`\n          margin: 0;\n        `}>\n          {displayName}\n        </p>\n      </>\n    );\n\n    if (socialNetwork) {\n      return (\n        <a\n          href={socialNetwork}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          css={css`\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            box-shadow: none;\n            & + & {\n              margin-left: 30px;\n            }\n            &:hover {\n              text-decoration: underline;\n            }\n          `}\n        >\n          {avatarAndName}\n        </a>\n      );\n    }\n\n    return (\n      <div\n        css={css`\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          box-shadow: none;\n          & + & {\n            margin-left: 30px;\n          }\n        `}\n      >\n        {avatarAndName}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { css } from '@emotion/core';\n\nlet hasLoaded = false;\nfunction maybeLoadDisqusScript(shortname, onLoad) {\n  if (hasLoaded) {\n    onLoad();\n    return;\n  }\n  window.disqus_config = function() {};\n\n  const script = document.createElement('script');\n  script.src = `//${shortname}.disqus.com/embed.js`;\n  script.async = true;\n  script.onload = onLoad;\n  document.body.appendChild(script);\n  hasLoaded = true;\n}\n\nexport default class Disqus extends Component {\n  static defaultProps = {\n    shortname: 'barradevida',\n    urlDomain: 'barradevida.com.br',\n    url: '',\n    identifier: '',\n    title: '',\n  };\n\n  componentDidMount() {\n    if (typeof window !== 'undefined' && window.document) {\n      const { shortname, urlDomain, url, identifier, title } = this.props;\n\n      maybeLoadDisqusScript(shortname, () => {\n        window.DISQUS.reset({\n          reload: true,\n          config: function() {\n            const { location } = window;\n            this.page.url = `${location.protocol}//${urlDomain}/${url}`;\n            this.page.identifier = identifier;\n            this.page.title = title;\n          },\n        });\n      });\n    }\n  }\n\n  render() {\n    return <div id=\"disqus_thread\" css={css`\n      margin-top: 3.64rem;\n    `} />;\n  }\n}\n","import React from 'react';\nimport {graphql} from 'gatsby';\nimport Helmet from 'react-helmet';\nimport Layout from '../components/Layout';\nimport EpisodeListItem from '../components/EpisodeListItem';\nimport Participant from '../components/Participant';\nimport Disqus from '../components/Disqus';\nimport SEO from '../components/SEO';\nimport {css} from '@emotion/core';\n\nconst Links = ({content}) => (\n  <ul>\n    {content.map(({name, links}) => (\n      <li key={name}>\n        {name}\n        <ul>\n          {links.map(link => (\n            <li key={link}>\n              <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                {link}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default function EpisodeTemplate({data: {episodesJson, allParticipantsJson, file, allFile}}) {\n  const {\n    title,\n    description,\n    embedded,\n    fields: {episodeNumber, slug},\n    hosts,\n    guests,\n    content,\n  } = episodesJson;\n\n  const participants = {};\n  allParticipantsJson.edges.forEach(({node}) => {\n    const id = node.fields.participantId;\n    const avatarUrl = allFile.edges.map(edge => edge.node).find(({name}) => name === id).publicURL;\n    participants[id] = {...node, avatarUrl};\n  });\n\n  const {\n    publicURL: image\n  } = file ?? {};\n\n  return (\n    <Layout>\n      <Helmet title={`E${episodeNumber}: ${title}`}/>\n      <SEO\n        title={title}\n        description={`Episódio: ${episodeNumber}`}\n        postSlug={slug}\n        image={image}\n        isBlogPost\n      />\n      <EpisodeListItem {...episodesJson} linked={false}/>\n      <p>\n        {description}\n      </p>\n      <iframe\n        src={embedded}\n        frameBorder=\"0\"\n        scrolling=\"no\"\n        css={{margin: 0, height: 161, width: '100%'}}>\n      </iframe>\n      <h2>Hosts</h2>\n      <div\n        css={css`\n          display: flex;\n          flex-direction: row;\n        `}\n      >\n        {hosts.map(host => participants[host]).map(participant => (\n          <Participant key={participant} {...participant} />\n        ))}\n      </div>\n      {guests && (\n        <>\n          <h2>Participação Especial</h2>\n          <div\n            css={css`\n              display: flex;\n              flex-direction: row;\n            `}\n          >\n            {guests.map(guest => participants[guest]).map(participant => (\n              <Participant key={participant} {...participant} />\n            ))}\n          </div>\n        </>\n      )}\n      {content?.length !== 0 && (\n        <>\n          <h2>Links do Episódio</h2>\n          <Links content={content}/>\n        </>\n      )}\n      <Disqus identifier={slug} url={`episode/${episodeNumber}`}/>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query EpisodeByNumber($episodeNumber: String!) {\n    episodesJson(fields: { episodeNumber: { eq: $episodeNumber } }) {\n      title\n      description\n      embedded\n      fields {\n        episodeNumber\n        slug\n      }\n      date {\n        start\n      }\n      hosts\n      guests\n      content {\n        name\n        links\n      }\n    }\n    allParticipantsJson {\n      edges {\n        node {\n          fields {\n            participantId\n          }\n          displayName\n          fullName\n          socialNetwork\n        }\n      }\n    }\n    allFile(filter: {sourceInstanceName: {eq: \"avatars\"}}) {\n      edges {\n        node {\n          publicURL\n          name\n        }\n      }\n    }\n    file(sourceInstanceName: {eq: \"thumbnails\"}, name: {eq: $episodeNumber}){\n      publicURL\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { DateTime } from 'luxon';\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nexport default ({\n  linked = true,\n  fields: { slug, episodeNumber },\n  title,\n  date,\n}) => {\n  return (\n    <Container>\n      <Dates>\n        {formatDate(date.start)}\n      </Dates>\n      {linked ? (\n        <h3 css={titleCss}>\n          <Link to={slug}>{title}</Link>\n        </h3>\n      ) : (\n        <h1 css={titleCss}>{title}</h1>\n      )}\n\n      <Subtitle>Episódio: {episodeNumber}</Subtitle>\n    </Container>\n  );\n};\n\nconst Container = styled('div')`\n  margin: 40px 0;\n`;\n\nconst Dates = styled('div')`\n  font-size: 0.88rem;\n`;\n\nconst titleCss = css`\n  margin: 0;\n`;\n\nconst Subtitle = styled('span')`\n  font-size: 0.8rem;\n`;\n\nfunction formatDate(date) {\n  return DateTime.fromISO(date).setLocale('pt-BR').toLocaleString(DateTime.DATE_FULL);\n}\n"],"sourceRoot":""}